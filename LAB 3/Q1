#include <iostream>

using namespace std;
// Function to search for a string horizontally, vertically, and diagonally in a 2D array
void searchInArray(char** arr, int rows, int cols, const string& target) {
    int len = target.length();

    // Horizontal search
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j <= cols - len; ++j) {
            bool found = true;
            for (int k = 0; k < len; ++k) {
                cout << "Comparing arr[" << i << "][" << j + k << "] = " << arr[i][j + k] << " with target[" << k << "] = " << target[k] << endl;
                if (arr[i][j + k] != target[k]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                cout << "Found horizontally at: (" << i << ", " << j << ")" << endl;
            }
        }
    }

    // Vertical search
    for (int j = 0; j < cols; ++j) {
        for (int i = 0; i <= rows - len; ++i) {
            bool found = true;
            for (int k = 0; k < len; ++k) {
                cout << "Comparing arr[" << i + k << "][" << j << "] = " << arr[i + k][j] << " with target[" << k << "] = " << target[k] << endl;
                if (arr[i + k][j] != target[k]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                cout << "Found vertically at: (" << i << ", " << j << ")" << endl;
            }
        }
    }

    // Diagonal search (top-left to bottom-right)
    for (int i = 0; i <= rows - len; ++i) {
        for (int j = 0; j <= cols - len; ++j) {
            bool found = true;
            for (int k = 0; k < len; ++k) {
                cout << "Comparing arr[" << i + k << "][" << j + k << "] = " << arr[i + k][j + k] << " with target[" << k << "] = " << target[k] << endl;
                if (arr[i + k][j + k] != target[k]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                cout << "Found diagonally at: (" << i << ", " << j << ")" << endl;
            }
        }
    }

    // Diagonal search (bottom-left to top-right)
    for (int i = len - 1; i < rows; ++i) {
        for (int j = 0; j <= cols - len; ++j) {
            bool found = true;
            for (int k = 0; k < len; ++k) {
                cout << "Comparing arr[" << i - k << "][" << j + k << "] = " << arr[i - k][j + k] << " with target[" << k << "] = " << target[k] << endl;
                if (arr[i - k][j + k] != target[k]) {
                    found = false;
                    break;
                }
            }
            if (found) {
                cout << "Found diagonally at: (" << i << ", " << j << ")" << endl;
            }
        }
    }
}


int main() {
    int rows, cols;
    cout << "Enter the number of rows and columns: ";
    cin >> rows >> cols;

    // Dynamically allocate memory for the 2D array
    char** arr = new char* [rows];
    for (int i = 0; i < rows; ++i) {
        arr[i] = new char[cols];
    }

    cout << "Enter the elements of the array:" << endl;
    for (int i = 0; i < rows; ++i) {
        for (int j = 0; j < cols; ++j) {
            cin >> arr[i][j];
        }
    }

    string target;
    cout << "Enter the string to search for: ";
    cin >> target;

    searchInArray(arr, rows, cols, target);
    

    // Free the dynamically allocated memory
    for (int i = 0; i < rows; ++i) {
        delete[] arr[i];
    }
    delete[] arr;

    return 0;
}
